#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'chef-ai-assistant'
require 'tty-spinner'
require 'tty-prompt'

# Handle special cases before checking for credentials
# Special cases are: setup command, help flag, or version flag
if ARGV.length >= 2 && ARGV[0] == 'ai' &&
   ['setup', '--help', '-h', '--version', '-v'].include?(ARGV[1])
  ai_command = ChefAiAssistant::Commands::Ai.new
  exit_code = ai_command.run(ARGV[1..-1])
  exit(exit_code || 0)
end

# Also handle the case where ai has a global help or version flag
if ARGV.length >= 1 && ARGV[0] == 'ai' &&
   (ARGV.include?('--help') || ARGV.include?('-h') || ARGV.include?('--version') || ARGV.include?('-v'))
  ai_command = ChefAiAssistant::Commands::Ai.new
  exit_code = ai_command.run(ARGV[1..-1])
  exit(exit_code || 0)
end

# Check if credentials file exists
unless ChefAiAssistant::CredentialsManager.credentials_exist?
  prompt = TTY::Prompt.new
  prompt.error('AI Assistant credentials not configured!')
  puts "Please run 'chef ai setup' to configure your Azure OpenAI credentials."
  exit 1
end

# Configure the AI assistant
spinner = TTY::Spinner.new('[:spinner] Configuring ChefAiAssistant...', format: :dots)
spinner.auto_spin
begin
  ChefAiAssistant.configure do |config|
    # Set integration context for proper boundary testing
    config.integration_gem_name = 'chef'
    config.integration_gem_version = ChefAiAssistant::VERSION
    config.integration_gem_description = 'Chef command-line tool for infrastructure automation'

    # Use relaxed context mode for the 'chef' command to allow answering general Chef questions
    config.strict_context_aware = false
  end

  spinner.success('(✓)')
rescue StandardError => e
  spinner.error('(✗)')
  prompt = TTY::Prompt.new
  prompt.error("Configuration failed: #{e.message}")
  exit 1
end

# Check command line arguments
if ARGV.empty?
  require 'tty-prompt'
  prompt = TTY::Prompt.new

  puts "Usage: #{$PROGRAM_NAME} COMMAND [arguments]"
  puts "\n#{prompt.decorate('Available commands:', :bold)}"
  puts "  #{prompt.decorate('ai', :blue).ljust(17)} Chef AI Assistant commands"
  puts "\nRun '#{prompt.decorate("#{$PROGRAM_NAME} COMMAND --help",
                                 :cyan)}' for more information on a specific command."
  exit 1
end

# Handle commands directly
command = ARGV[0]
if command == 'ai'
  # Create an instance of the AI command
  ai_command = ChefAiAssistant::Commands::Ai.new

  # Run the AI command with the remaining arguments
  exit_code = ai_command.run(ARGV[1..-1])

  exit(exit_code || 0)
else
  prompt = TTY::Prompt.new
  prompt.error("Unknown command: #{command}")

  puts "Usage: #{$PROGRAM_NAME} COMMAND [arguments]"
  puts "\n#{prompt.decorate('Available commands:', :bold)}"
  puts "  #{prompt.decorate('ai', :blue).ljust(17)} Chef AI Assistant commands"
  puts "\nRun '#{prompt.decorate("#{$PROGRAM_NAME} COMMAND --help",
                                 :cyan)}' for more information on a specific command."
  exit 1
end
